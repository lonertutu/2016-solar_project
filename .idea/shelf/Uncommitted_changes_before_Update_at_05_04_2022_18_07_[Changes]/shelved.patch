Index: solar_input.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># coding: utf-8\r\n# license: GPLv3\r\n\r\nfrom solar_objects import Star, Planet\r\n\r\n\r\ndef read_space_objects_data_from_file(input_filename):\r\n    \"\"\"\r\n     функция считывает данные о космических объектах из файла, создаёт сами объекты\r\n    и вызывает создание их графических образов\r\n     :param input_filename: имя входного файла\r\n    \"\"\"\r\n\r\n    objects = []\r\n    with open(input_filename) as input_file:\r\n        for line in input_file:\r\n            if len(line.strip()) == 0 or line[0] == '#':\r\n                continue  # пустые строки и строки-комментарии пропускаем\r\n            object_type = line.split()[0].lower()\r\n            if object_type == \"star\":\r\n                star = Star()\r\n                parse_star_parameters(line, star)\r\n                objects.append(star)\r\n            elif object_type == \"planet\":\r\n                planet = Planet()\r\n                parse_planet_parameters(line, planet)\r\n                objects.append(planet)\r\n            else:\r\n                print(\"Unknown space object\")\r\n\r\n    return objects\r\n\r\n\r\ndef parse_star_parameters(line, star):\r\n    \"\"\"\r\n     Считывает данные о звезде из строки.\r\n    Входная строка должна иметь слеюущий формат:\r\n    Star <радиус в пикселах> <цвет> <масса> <x> <y> <Vx> <Vy>\r\n    Здесь (x, y) — координаты зведы, (Vx, Vy) — скорость.\r\n    Пример строки:\r\n    Star 10 red 1000 1 2 3 4\r\n     :param line: строка с описание звезды.\r\n     :param star: объект звезды.\r\n    \"\"\"\r\n    star.R = int(line.split()[1])\r\n    star.color = line.split()[2]\r\n    star.m = float(line.split()[3])\r\n    star.x = float(line.split()[4])\r\n    star.y = float(line.split()[5])\r\n    star.Vx = float(line.split()[6])\r\n    star.Vy = float(line.split()[7])\r\n\r\n\r\ndef parse_planet_parameters(line, planet):\r\n    \"\"\"\r\n     Считывает данные о звезде из строки.\r\n    Входная строка должна иметь слеюущий формат:\r\n    Star <радиус в пикселах> <цвет> <масса> <x> <y> <Vx> <Vy>\r\n    Здесь (x, y) — координаты зведы, (Vx, Vy) — скорость.\r\n    Пример строки:\r\n    Star 10 red 1000 1 2 3 4\r\n     :param line: строка с описание звезды.\r\n     :param planet: объект звезды.\r\n    \"\"\"\r\n    planet.R = int(line.split()[1])\r\n    planet.color = line.split()[2]\r\n    planet.m = float(line.split()[3])\r\n    planet.x = float(line.split()[4])\r\n    planet.y = float(line.split()[5])\r\n    planet.Vx = float(line.split()[6])\r\n    planet.Vy = float(line.split()[7])\r\n\r\n\r\ndef write_space_objects_data_to_file(output_filename, space_objects):\r\n    \"\"\"\r\n    Сохраняет данные о космических объектах в файл.\r\n    Строки должны иметь следующий формат:\r\n    Star <радиус в пикселах> <цвет> <масса> <x> <y> <Vx> <Vy>\r\n    Planet <радиус в пикселах> <цвет> <масса> <x> <y> <Vx> <Vy>\r\n     :param output_filename: имя входного файла\r\n     :param space_objects: список объектов планет и звёзд\r\n    \"\"\"\r\n    out_file = open(output_filename, 'w')\r\n    for obj in space_objects:\r\n        out_file.write(obj.type + ' ' + str(obj.R) + ' ' + obj.color + ' ' + str(obj.m) + ' ' + str(obj.x) +\r\n                       ' ' + str(obj.y) + ' ' + str(obj.Vx) + ' ' + str(obj.Vy) + '\\n')\r\n    out_file.close()\r\n\r\n\r\ndef statistics(output_filename, space_objects, time):\r\n    \"\"\"\r\n    при необходимости сохраняет параметры каждого объекта в файле следующей структуры:\r\n    Star <radius in pixels> <color> <mass> <x> <y> <Vx> <Vy>,\r\n    Planet <radius in pixels> <color> <mass> <x> <y> <Vx> <Vy>.\r\n    :param output_filename: имя получаемого файла\r\n    :param space_objects: список объектов, параметры которых мы записываем в файл\r\n    :param time: расчетное время до момента, когда пользователь попросит сохранить параметры в файл\r\n    \"\"\"\r\n    count = 0\r\n    with open(output_filename, \"w\") as out_file:\r\n        for obj in space_objects:\r\n            if obj.type == \"planet\":\r\n                print(f\"{count} {time} {obj.type} {obj.x} {obj.y} {obj.vx} {obj.vy}\", file=out_file)\r\n                line = str(count) + \" \" + str(obj.get_distance_massive()) + \" \" + str(obj.get_v_massive()) + \"\\n\"\r\n                out_file.write(line)\r\n            count += 1\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"This module is not for direct call!\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/solar_input.py b/solar_input.py
--- a/solar_input.py	
+++ b/solar_input.py	
@@ -5,10 +5,12 @@
 
 
 def read_space_objects_data_from_file(input_filename):
-    """
-     функция считывает данные о космических объектах из файла, создаёт сами объекты
+    """Cчитывает данные о космических объектах из файла, создаёт сами объекты
     и вызывает создание их графических образов
-     :param input_filename: имя входного файла
+
+    Параметры:
+
+    **input_filename** — имя входного файла
     """
 
     objects = []
@@ -17,14 +19,10 @@
             if len(line.strip()) == 0 or line[0] == '#':
                 continue  # пустые строки и строки-комментарии пропускаем
             object_type = line.split()[0].lower()
-            if object_type == "star":
+            if object_type == "star":  # FIXME: do the same for planet
                 star = Star()
                 parse_star_parameters(line, star)
                 objects.append(star)
-            elif object_type == "planet":
-                planet = Planet()
-                parse_planet_parameters(line, planet)
-                objects.append(planet)
             else:
                 print("Unknown space object")
 
@@ -32,79 +30,57 @@
 
 
 def parse_star_parameters(line, star):
-    """
-     Считывает данные о звезде из строки.
+    """Считывает данные о звезде из строки.
     Входная строка должна иметь слеюущий формат:
     Star <радиус в пикселах> <цвет> <масса> <x> <y> <Vx> <Vy>
+
     Здесь (x, y) — координаты зведы, (Vx, Vy) — скорость.
     Пример строки:
     Star 10 red 1000 1 2 3 4
-     :param line: строка с описание звезды.
-     :param star: объект звезды.
+
+    Параметры:
+
+    **line** — строка с описание звезды.
+    **star** — объект звезды.
     """
-    star.R = int(line.split()[1])
-    star.color = line.split()[2]
-    star.m = float(line.split()[3])
-    star.x = float(line.split()[4])
-    star.y = float(line.split()[5])
-    star.Vx = float(line.split()[6])
-    star.Vy = float(line.split()[7])
 
+    pass  # FIXME: not done yet
 
 def parse_planet_parameters(line, planet):
-    """
-     Считывает данные о звезде из строки.
+    """Считывает данные о планете из строки.
+    Предполагается такая строка:
     Входная строка должна иметь слеюущий формат:
-    Star <радиус в пикселах> <цвет> <масса> <x> <y> <Vx> <Vy>
-    Здесь (x, y) — координаты зведы, (Vx, Vy) — скорость.
+    Planet <радиус в пикселах> <цвет> <масса> <x> <y> <Vx> <Vy>
+
+    Здесь (x, y) — координаты планеты, (Vx, Vy) — скорость.
     Пример строки:
-    Star 10 red 1000 1 2 3 4
-     :param line: строка с описание звезды.
-     :param planet: объект звезды.
+    Planet 10 red 1000 1 2 3 4
+
+    Параметры:
+
+    **line** — строка с описание планеты.
+    **planet** — объект планеты.
     """
-    planet.R = int(line.split()[1])
-    planet.color = line.split()[2]
-    planet.m = float(line.split()[3])
-    planet.x = float(line.split()[4])
-    planet.y = float(line.split()[5])
-    planet.Vx = float(line.split()[6])
-    planet.Vy = float(line.split()[7])
+    pass  # FIXME: not done yet...
 
 
 def write_space_objects_data_to_file(output_filename, space_objects):
-    """
-    Сохраняет данные о космических объектах в файл.
+    """Сохраняет данные о космических объектах в файл.
     Строки должны иметь следующий формат:
     Star <радиус в пикселах> <цвет> <масса> <x> <y> <Vx> <Vy>
     Planet <радиус в пикселах> <цвет> <масса> <x> <y> <Vx> <Vy>
-     :param output_filename: имя входного файла
-     :param space_objects: список объектов планет и звёзд
+
+    Параметры:
+
+    **output_filename** — имя входного файла
+    **space_objects** — список объектов планет и звёзд
     """
-    out_file = open(output_filename, 'w')
-    for obj in space_objects:
-        out_file.write(obj.type + ' ' + str(obj.R) + ' ' + obj.color + ' ' + str(obj.m) + ' ' + str(obj.x) +
-                       ' ' + str(obj.y) + ' ' + str(obj.Vx) + ' ' + str(obj.Vy) + '\n')
-    out_file.close()
-
+    with open(output_filename, 'w') as out_file:
+        for obj in space_objects:
+            print(out_file, "%s %d %s %f" % ('1', 2, '3', 4.5))
+            # FIXME: should store real values
 
-def statistics(output_filename, space_objects, time):
-    """
-    при необходимости сохраняет параметры каждого объекта в файле следующей структуры:
-    Star <radius in pixels> <color> <mass> <x> <y> <Vx> <Vy>,
-    Planet <radius in pixels> <color> <mass> <x> <y> <Vx> <Vy>.
-    :param output_filename: имя получаемого файла
-    :param space_objects: список объектов, параметры которых мы записываем в файл
-    :param time: расчетное время до момента, когда пользователь попросит сохранить параметры в файл
-    """
-    count = 0
-    with open(output_filename, "w") as out_file:
-        for obj in space_objects:
-            if obj.type == "planet":
-                print(f"{count} {time} {obj.type} {obj.x} {obj.y} {obj.vx} {obj.vy}", file=out_file)
-                line = str(count) + " " + str(obj.get_distance_massive()) + " " + str(obj.get_v_massive()) + "\n"
-                out_file.write(line)
-            count += 1
-
+# FIXME: хорошо бы ещё сделать функцию, сохранающую статистику в заданный файл...
 
 if __name__ == "__main__":
     print("This module is not for direct call!")
